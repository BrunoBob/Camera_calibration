# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Install opencv
          
      - name: Cache OpenCV
        id: opencv-cache
        uses: actions/cache@v2
        with:
          path: ./opencv-install
          key: ${{ runner.os }}-opencv-cache

      - name: Install OpenCV
        uses: rayandrews/with-opencv-action@v1
        with:  
          dir: ./opencv-install
          cached: ${{ steps.opencv-cache.outputs.cache-hit }}
          opencv-version: '4.6.0'
          
      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: cmake -B ${{github.workspace}}/build

      - name: Build
        # Build your program with the given configuration
        run: cmake --build ${{github.workspace}}/build

      #- name: Test
       # working-directory: ${{github.workspace}}/build
        # Execute tests defined by the CMake configuration.  
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        #run: ctest -C ${{env.BUILD_TYPE}}
